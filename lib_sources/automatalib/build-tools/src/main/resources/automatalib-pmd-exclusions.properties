# Copyright (C) 2013-2020 TU Dortmund
# This file is part of AutomataLib, http://www.automatalib.net/.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



# we want to eagerly consume here and do not care for the actual result
# and we do not always want to close the streams (just like try-with-resources does)
net.automatalib.commons.util.IOUtil=CheckSkipResult,UseTryWithResources

# we want to cut cloning hierarchy here
net.automatalib.commons.smartcollections.ArrayStorage=CloneThrowsCloneNotSupportedException,ProperCloneImplementation

# we don't perform arithmetic operations on Shorts, so usage is fine
net.automatalib.commons.util.WrapperUtil=AvoidUsingShortType

# for examples, this is fine
net.automatalib.examples.ads.ADSExample=SystemPrintln
net.automatalib.examples.brics.SimpleBricsExample=SystemPrintln
net.automatalib.examples.graph.DFSExample=SystemPrintln
net.automatalib.examples.incremental.IncrementalDFAExample=SystemPrintln
net.automatalib.examples.incremental.IncrementalMealyExample=SystemPrintln
net.automatalib.examples.incremental.IncrementalPCDFAExample=SystemPrintln
net.automatalib.examples.modelchecking.LTSminExample=SystemPrintln
net.automatalib.examples.modelchecking.LTSminMonitorExample=SystemPrintln
net.automatalib.examples.vpda.OneSEVPAExample=SystemPrintln

# hasNext() changes its semantics after calling next()
net.automatalib.ts.acceptors.DeterministicAcceptorTS=PrematureDeclaration

# parameters are filled with values. We store the value prematurely, because we compute it anyway
net.automatalib.util.automata.cover.Covers=PrematureDeclaration

# ArrayList#ensureCapacity is required
net.automatalib.util.automata.random.RandomAutomatonGenerator=LooseCoupling

# We want to allow extending for the 'Automata' class
net.automatalib.util.ts.TS=UseUtilityClass

# We not only copy the array here
net.automatalib.util.partitionrefinement.PaigeTarjanInitializers=AvoidArrayLoops

# We want to aggregate functionality of an abstract class and an interface
net.automatalib.words.abstractimpl.AbstractSymbol=AbstractClassWithoutAnyMethod
